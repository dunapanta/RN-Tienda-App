164 Distribucion del proyecto
Dependencias que instalo
yarn add redux react-redux
yarn add react-navigation
yarn add react-navigation-header-buttons
yarn add react-navigation-stack
expo install react-native-gesture-handler react-native-reanimated

165 ProductOverviewScreen
Se presentan todos los productos que se pueden ordenar
defini modelo de productos
configuro redux
copio dummy data

166 Utilizo useSelector en ProductsOverview para tener los datos del store
 const products = useSelector( state => state.products.availableProducts)
 lo utilizo en Flatlistya que requiere un array para funcionar
 Defino los colores en la carpeta constants
 Ahora creo el Navigator en el archivo ShopNavigator.js

 const ProductsNavigator = createStackNavigator({
    ProductsOverview: ProductsOverviewScreen
}, {
    defaultNavigationOptions: {
        headerStyle:{
            backgrondColor: Platform.OS === 'android' ? Colors.primary : ''
        },
        headerTintColor: Platform.OS === 'android' ? 'black' : Colors.primary,

    }
})
 defaultNavigationOptions ---> se aplica para todas las sreens
 selo exporta con la funciona createAppContainer
 export default createAppContainer(ProductsNavigator)
 y lo incluyo en App.js asi

 <Provider store={store}>
    <ShopNavigator />
</Provider>

167 Creo componente ProductItem
creo estilos y lo paso a Flatlist
en el caso de la imagenes siempre deben tener width y heigth
y se coloca overflow: 'hidden' para que los hijos no se sobrepongan a los estilos definidos en el padre ejemplo borderRadius 

167 Comienzo a trabajar con ProductDetailScreen
lo añado a ShopNavigation 
IMPORTANTE RECODAR que el primer screen pasado a ProductsNavigator es con el que se inicializa la app
agrego la navegacion en ProductOverviewScreen

168 Agrego la navegacion y paso productId, title por medio de navigation
para encontrarlo en el state de redux
const selectedProduct = useSelector(
        state => state.products.availableProducts.find(p => p.id === productId) )

agrego TouchableOpacity en componente ProductItem para poder navegar haciendo tab en cualquier parte del mismo
en android pondo TouchabeNativeFeedback y se añade useForeground para que la imagen tambien tenga el efecto ripple
<Touchable onPress={onViewDetail}  background={TouchableNativeFeedback.Ripple(Colors.secondaryLight, true)} useForeground>

169 Agrego contenido en ProductDetailScreen

170 Agrego fonts de la misma manera
expo install expo-app-loading
expo install expo-font

importo
import * as Font from 'expo-font'
import AppLoading from 'expo-app-loading';

const fetchFonts = async () => {
  await Font.loadAsync({
    'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),
    'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf')
  })
}
 dentro de App
const [fontLoaded, setFontLoaded] = useState(false);
 if(!fontLoaded){
    return <AppLoading 
            startAsync={fetchFonts} 
            onFinish={ () => setFontLoaded(true) }
            onError={ (err) => console.log(err)}
          />

Agrego los estilos en donde necesito

171 Logica de cart usando redux
Para comprobar uso React Native Debugger
con ctrl + t puedo abrir una nueva ventana y confirmar el puerto
en el emulador con ctrl + m selecciono Debug Remote JS
installo en el proyecto
yarn add --dev redux-devtools-extension
En App
import { composeWithDevTools } from 'redux-devtools-extension'
const store = createStore(rootReducer, composeWithDevTools())


172 Agrego HeaderButton para agregar los iconos
agrego CartScreen
convierto objeto en array para desabilitar el boton si no hay items en el carrito

173 Flatlist con los items del carrito

174 Agregando logica al boton de borrar
el el reducer o se elimina o se disminuye la cantidad
se utiliza delete lo cual no habia utilizado antes para borrar una propiedad de un objeto
Tambien ordeno el array con sort para que retorne en el mismo orden
transformedCartItems.sort( (a, b) => a.productId > b.productId ? 1 : -1)

175 Creo modelo, action y reducer de orders
en action solo se pasa items y totalAmount y el modelo se define un id, el id se creara luego en un servidor
por el momento se utiliza Date().toString() que sirva como id

176 Añado el drawer para eso 

yarn add react-native-screens
yarn add react-navigation-drawer
import { createDrawerNavigator } from 'react-navigation-drawer'

const ShopNavigator = createDrawerNavigator({
    Products: ProductsNavigator,
    Orders: OrdersNavigator
},{
    contentOptions:{
        activeTintColor:  Colors.primary
    }
})

En ProductsOverviewScreen y en OrdersScreen agrego el menu para el drawer con headerLeft
 headerLeft: () => (
            <HeaderButtons HeaderButtonComponent={HeaderButton}>
                <Item 
                    title="Menu"
                    iconName={Platform.OS === 'android' ? 'md-menu' : 'ios-menu'}
                    onPress={ () => {
                        navData.navigation.toggleDrawer()
                    }}
                />
            </HeaderButtons>
    ),

se agrega iconos al drawer

navigationOptions:{
        drawerLabel: 'Ordenes',
        drawerIcon: drawerConfig => (
            <Ionicons 
                name={Platform.OS === 'android' ? 'md-list' : 'ios-list'}
                size={22}
                color={drawerConfig.tintColor}
            />
        ) 
    }
 }

 177 Borrando el Carrito
 importtante saber que se puede utilizar la misma action y mas de un reducer y se ejecuta a la vez
 por eso en el reducer de cart se agrega ADD_ORDER para que también borre el carrido
 para la fecha utilizo un metodo en la clase y la envio con dayjs

import relativeTime from  'dayjs/plugin/relativeTime'
import 'dayjs/locale/es'

dayjs.extend(relativeTime)

  return dayjs(this.date).locale("es").format('DD MMMM YYYY, hh:mm')

  179 mostrando los detalles de los productos con el boton

  180 empezando a trabajar con UserProductScreen
  los productos que aparecen ahi debe ser los que pertenecen al usuario logeado
  se implementa la navegacion 

  181 Utilizo children para pasar botones diferentes para los productos y los productos
   del usuarioque debe ser capaz de editar y eliminar

182 Añado lógica para borrar un producto en reducer products
return {
        ...state,
        userProducts: state.userProducts.filter( 
            product => product.id !== action.pid
            ),
        availableProducts: state.availableProducts.filter( 
            product => product.id !== action.pid
            ),
    }

tambien los cambios deben hacerse en el reducer cart

 if (state.items[action.pid]){
                return state
            }
            const updatedItems = {...state.items}
            const itemTotal = state.items[action.pid].sum
            delete updatedItems[action.pid]
            return {
                ...state,
                items: updatedItems,
                totalAmount: state.totalAmount - itemTotal
            } 

183 Navegacion a Editar producto
para asegurarse que el valor de amount no arroje un - al momento de eliminar del carrito
Math.round(cartTotalAmount.toFixed(2) * 100) / 100

184 Agrego formularios para agregar o editar productos

186 pasando por params datos
añado actions y reducer para crear y actualizar 

187 Agregando alerta para le borrado de un producto y navegando atras ds´pues de agregar o editar unproducto

191 cambio keyboard para precio a decimal-pad
propiedades de input existen varias

192 Aplican las bases de validacion de inputs
if (text.trim().length === 0){
            setTitleIsValid(false)
        } else {
            setTitleIsValid(true)
        }
        setTitle(text)

193 useReducer un hook para manejar el estado se lo suele utilizar para estados conectados o para estados mas complejos
Utilizando useReducer() en vez de tener states separados para cada input
es como tener un big state que hace merge a los inputs y las validacioness

formReducer lo creo fuera del componente para que no se vuelva a crear en cada renderizado 

y se implementa con un estado inicializal

const [formState, dispatchFormState] = useReducer(formReducer, {
        inputValues: {
            title: editedProduct ? editedProduct.title : '',
            imageUrl: editedProduct ? editedProduct.imageUrl : '',
            price: '',
            description: editedProduct ? editedProduct.description : ''
        }, 
        inputValidities: {
            title: editedProduct ? true : false,
            imageUrl: editedProduct ? true : false,
            price: editedProduct ? true : false,
            description: editedProduct ? true : false,
        },
        formIsValid: editedProduct ? true : false,
    })

    debe ser capaz de cambiar el estado cuando la action es despachada
    y la action se despacha cuando se tipea en alguno de los text inputs

    se despacha asi

    dispatchFormState({
            type: FORM_INPUT_UPDATE, 
            value: text,
            isValid: isValid,
            input: 'title'
         })

195 Separando input en un nuevo componente y agregando useReducer para texto y validaciones
tambien se agrega touched para saber cuando se termino de editar y perdio el "foco" del input
hay que tener ojo con las funciones bind porque se estaba ejecutando en cada renderizado y creando un loop
infinito ni el useCallback valia para solucionar eso por eso se pasa un id con el nombre del input

197 usando KeyboardAvoidingView para que el teclado no se sobreponga a los inputs

201 Configuro firebase con Realtime Database

202 Instalo redyx-thunk
yarn add redux-thunk
Es un middleware de redux para manejar asincronicidad o side effects
el reducer sigue siendo sincrono pero las actions pueden ser asincronas
se puede enviar una request como parte de la action y una vez que se haya hecho se despachadala 
la action al reducer
Para configurar redux-thunk

import { createStore, combineReducers, applyMiddleware } from 'redux'
import ReduxThunk from 'redux-thunk'
const store = createStore(rootReducer, applyMiddleware(ReduxThunk))

203 Ahora en para despachar la action se retorna una funccion

se utiliza JSON.stringify para transformar un objeto o arreglo a formato JSON

fetch retorna una promesa

export const createProduct = (title, description, imageUrl, price) => {
    return async dispatch => {
        // se puede ejecutar código asíncrono
        const response = await fetch('https://rn-shop-app-dc6ed-default-rtdb.firebaseio.com/products.json', {
            method: 'POST',
            headers:{
                'Content-Type':'application/json'
            },
            body: JSON.stringify({
                title,
                description,
                imageUrl,
                price
            })
        })

        const resData = await response.json() 

        console.log(resData)

        dispatch({
            type: CREATE_PRODUCT,
            productData: {
                title,
                description,
                imageUrl,
                price
            }
        })
    }
}


204 Obteniendo los productos de firebase

205 S i se quiere utilizar async await dentro de un useEffect se debe crear una funcion y se la llama asi

useEffect( () => {
        setIsLoading(true)
        // si se quiere utilizar async await es importante crear una nueva funcion, 
        //useEffect NO debe retornar una promesa y esta es la forma correcta de hacerlo o usando then catch
        const loadProducts = async () => {
            await dispatch(productsActions.fetchProducts()).then()
            setIsLoading(false)
        }
        loadProducts()
    }, [dispatch])

para mostrar spinner

<View style={styles.centered}>
    <ActivityIndicator size='large' color={Colors.primaryDark} />
</View>

206 La navegación pro drawer se mantiene en memoria  por lo que no se vuelve a hacer fetch cuando se cambia a otra
sección y esto es un problema en caso de que se edite o cambie algo no se trabajaria con los datos actuales
para volver a hacer fetch es necesario implementar un navigation listener para volver a obtener datos cadavezción

useEffect( () => {
        // si se quiere utilizar async await es importante crear una nueva funcion, 
        //useEffect NO debe retornar una promesa y esta es la forma correcta de hacerlo o usando then catch
        
        loadProducts()
    }, [dispatch, loadProducts])

    207 Para actualizar se hace con PATCH o PUT
    PUT fully overrides the resource with the new data
    PATCH will update it in the places where i tell it to update

    utilizo PATCH porque solo quiero actualizar  title, description, imageUrl
    
    export const updateProduct = (id, title, description, imageUrl) => {
    return async dispatch => {
        
        await fetch(`https://rn-shop-app-dc6ed-default-rtdb.firebaseio.com/products/${id}.json`,
        {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title,
                description,
                imageUrl,
            })
        })

        dispatch({   
            type: UPDATE_PRODUCT,
            pid: id,
            productData: {
                title,
                description,
                imageUrl,
            }
        })
    }
}

212 Pull to Refresh
hacer fetch dentro de la pagina o seccion ya que es un comportamiento común en las apps
Es facil si se utiliza FlatList o ScrollView
lo implemento en ProductsOverviewScreen en FlatList añado las propiedades 
onRefresh={loadProducts}
refreshing={isLoading}



217 Autenticación en ShopNavigator importo
createSwitchNavigator que sirve para casos de autenticación con este desplega un solo screen y no puedes volver a uno anterior
es el caso de login si se loggeo el usuario no puede volver atras 

import { createSwitchNavigator  } from 'react-navigation'

const AuthNavigator = createStackNavigator({
    Auth: AuthScreen
})

const MainNavigator  = createSwitchNavigator({
    Auth: AuthNavigator,
    Shop: ShopNavigator
})

creo screen de autenticación

importo

yarn add expo-linear-gradient

 <LinearGradient colors={[Colors.primary, Colors.secondary]} style={styles.gradient}>
</LinearGradient>

218 Activo autenticacion correo y contraseña en firebase 
creo action para despachar y crear un nuevo usuario

220 Manejando loading y Errores

221 Cambio a Shop cuando hago login bien 
comienzo a implementar lógica de reducer para el token 
para obtener acceso al store (con todas las partes de los reducers) desde otras actions se puede acceder mediante redux thunk de esta forma

 return async (dispatch, getState) => {
      const token = getState().auth.token
 }

 222 Mapeo de Orders a Users

 224 AutoLogin si se tiene un token válido